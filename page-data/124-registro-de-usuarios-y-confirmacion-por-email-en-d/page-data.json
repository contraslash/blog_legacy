{"componentChunkName":"component---src-templates-blog-post-js","path":"/124-registro-de-usuarios-y-confirmacion-por-email-en-d/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"2d74b713-9dd6-5072-9cb1-e6606a7b307b","excerpt":"Registro de usuarios y confirmación por email en Django 2.0 Ha pasado mucho tiempo desde que publiqué este artículo, y recientemente recibí un correo…","html":"<h1>Registro de usuarios y confirmación por email en Django 2.0</h1>\n<p>Ha pasado mucho tiempo desde que publiqué <a href=\"http://blog.contraslash.com/user-registration-and-email-confirmation-in-django/\">este artículo</a>, y recientemente recibí un correo solicitando ayuda con la implementación de esta funcionalidad.</p>\n<p>Debo confesar que viendo en retrospectiva no está construido de la mejor manera y vale la pena hacer una reimplementación de ciertas cosas, que mencionaré a continuación.</p>\n<p>Siguiendo la estructura del primer post, iniciaremos con la creación del formulario de registro, así que en nuestro archivo <strong>forms.py</strong> escribiremos lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#! /etc/bin/python\n# -*- coding: utf-8 -*-\nfrom django import forms\nfrom django.contrib.auth.models import User\nfrom django.forms import ModelForm\nfrom django import forms\nfrom django.utils.translation import ugettext as _\n\nclass UserForm(ModelForm):\n    &quot;&quot;&quot;\n    Form wrapper for User in django.contril.auth\n    &quot;&quot;&quot;\n    password = forms.CharField(widget=forms.PasswordInput, label=_(&#39;Password&#39;))\n\n    class Meta:\n\n        model = User\n        fields = (\n            &#39;email&#39;,\n            &#39;username&#39;,\n            &#39;password&#39;\n        )\n        labels = {\n            &#39;email&#39;: _(&#39;Email&#39;),\n            &#39;username&#39;: _(&#39;Username&#39;),\n            &#39;password&#39;: _(&#39;Password&#39;),\n        }\n        error_messages = {\n            &#39;username&#39;: {\n                &#39;required&#39;: _(&#39;Username field is required&#39;),\n                &#39;invalid&#39;: _(&#39;Username field is invalid&#39;)\n            },\n            &#39;password&#39;: {\n                &#39;required&#39;: _(&#39;Password field is required&#39;),\n                &#39;invalid&#39;: _(&#39;Password field is invalid&#39;)\n            }, }\n        widgets = {\n            &#39;first_name&#39;: forms.TextInput(attrs={&#39;class&#39;: &#39;validate&#39;, &#39;required&#39;: &#39;required&#39;}),\n            &#39;last_name&#39;: forms.TextInput(attrs={&#39;class&#39;: &#39;validate&#39;, &#39;required&#39;: &#39;required&#39;}),\n            &#39;email&#39;: forms.EmailInput(attrs={&#39;class&#39;: &#39;validate&#39;, &#39;required&#39;: &#39;required&#39;}),\n            &#39;username&#39;: forms.TextInput(attrs={&#39;class&#39;: &#39;validate&#39;, &#39;required&#39;: &#39;required&#39;}),\n            &#39;password&#39;: forms.TextInput(attrs={&#39;class&#39;: &#39;validate&#39;, &#39;required&#39;: &#39;required&#39;}),\n        }\n\n    def clean_email(self):\n        &quot;&quot;&quot;\n        Verification for unique email\n        :return: Email or raise exception\n        &quot;&quot;&quot;\n        email = self.cleaned_data[&quot;email&quot;]\n        try:\n            User._default_manager.get(email=email)\n        except User.DoesNotExist:\n            return email\n        raise forms.ValidationError(&#39;duplicate email&#39;)\n\n    def save(self, commit=True):\n        &quot;&quot;&quot;\n        Custom save method for determine active and unactive users\n        :param commit:\n        :return:\n        &quot;&quot;&quot;\n        user = super(UserForm, self).save(commit=False)\n        user.email = self.cleaned_data[&#39;email&#39;]\n        if commit:\n            user.is_active = False\n            user.save()\n        return user</code></pre></div>\n<p>Lo primero rescatable de esta nueva implementación es el uso de <code class=\"language-text\">ugettext</code> con alias <code class=\"language-text\">_</code>, que nos va a permitir en un futuro traducir nuestros labels a otro idioma.</p>\n<p>También el uso de clases personalizadas en nuestros inputs, en este caso estamos usando la clase validate, que se encuentra en la librería <a href=\"http://materializecss.com/\">Materializecss</a> que realiza algunas validaciones por nosotros y le da un buen aspecto a nuestros formularios</p>\n<p>Lo siguiente son los validadores a nivel de input, en nuestro caso el método, que verifica si el correo ya ha sido registrado antes y retorna una excepción</p>\n<p>Por último, se altera el flujo del método save, diciendo que el usuario no estará activo, y solo activaremos el usuario hasta que valide su cuenta </p>\n<p>Ahora crearemos un perfil para este usuario, en nuestro archivo <strong>models.py</strong> escribiremos lo siguiente</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.utils.text import slugify\nfrom django.db import IntegrityError\n\nfrom . import conf as authentication_conf\n\nclass UserProfile(models.Model):\n    &quot;&quot;&quot;\n    Model for extended information of User at django.contrib.auth\n    &quot;&quot;&quot;\n\n    # One to one references to User Model\n    user = models.OneToOneField(User)\n    # Activation toke for email verification\n    activation_token = models.CharField(max_length=40, blank=True)\n    # Expiration date for activation token\n    expiration = models.DateTimeField(blank=True, null=True)\n    # Profile description\n    profile = models.TextField()\n    # Slug\n    slug = models.SlugField()\n    # profile_image\n    image = models.ImageField(blank=True, null=True, upload_to=authentication_conf.UPLOAD_PROFILE_IMAGES)\n    # youtube video\n    youtube_url = models.URLField(blank=True, null=True)\n    # cellphone\n    cellphone = models.CharField(max_length=20, default=&quot;&quot;)\n\n    def save(self, force_insert=False, force_update=False, using=None,\n             update_fields=None):\n        if not self.slug:\n            self.slug = slugify(self.user.username)\n        successful_save = False\n        saved_object = None\n        while not successful_save:\n            try:\n                saved_object = super(UserProfile, self).save(force_insert, force_update, using, update_fields)\n                successful_save = True\n            except IntegrityError:\n                    self.slug = self.slug[:-4] + &quot;-&quot; + generate_random_string(4)\n        return saved_object\n\n    def __unicode__(self):\n        return unicode(self.user)\n\ndef generate_random_string(n):\n    &quot;&quot;&quot;\n    Generates a random string of length n\n    :param n: Length of string\n    :return: Random string\n    &quot;&quot;&quot;\n    return &#39;&#39;.join(random.choice(string.ascii_lowercase) for a in range(n))</code></pre></div>\n<p>El modelo anteriormente creado nos da una función de perfil de usuario y nos da los elementos para agregar la funcionalidad de verificar el un usuario, ya que activation_token almacenara un registro único con el que un  usuario ingresará al sistema y cambiará el estado de su cuenta, esto se implentará acontinuación en nuestro archivo <strong>views.py</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># -*- coding: utf-8 -*-\nfrom django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom django.shortcuts import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse_lazy\nfrom django.utils import timezone\nfrom django.core.mail import send_mail\nfrom django.utils.translation import ugettext as _\nfrom django.template.loader import get_template\nfrom django.template.context import Context\n\n\nfrom .forms import UserForm, User\nfrom .models import UserProfile\n\nfrom hashlib import sha1\nfrom random import random\nfrom datetime import datetime, timedelta\n\nclass SignUp(TemplateView):\n    &quot;&quot;&quot;\n    Custom Sign up view. Sends a mail for email verification\n    &quot;&quot;&quot;\n    template_name = &#39;authentication/sign-up.html&#39;\n    userform = UserForm(prefix=&#39;user&#39;)\n    userformerrors = None\n\n    def get_context_data(self, **kwargs):\n        context = super(SignUp, self).get_context_data(**kwargs)\n        print context\n        if &#39;userform&#39; not in context:\n            context[&#39;userform&#39;] = self.userform\n        if &#39;userformerrors&#39; not in context:\n            context[&#39;userformerrors&#39;] = self.userformerrors\n        return context\n\n    def post(self, request, *args, **kwargs):\n        userform = UserForm(request.POST, prefix=&#39;user&#39;)\n        if userform.is_valid():\n            user = userform.save(commit=False)\n            user.set_password(userform.cleaned_data[&#39;password&#39;])\n            user.save()\n            username = userform.cleaned_data[&#39;username&#39;]\n            email = userform.cleaned_data[&#39;email&#39;]\n            salt = sha1(str(random())).hexdigest()[:5]\n            activation_key = sha1(salt+email).hexdigest()\n            key_expires = datetime.today() + timedelta(2)\n\n            #Get user by username\n            user = User.objects.get(username=username)\n\n            # Create and save user profile\n            activation_token = UserProfile(user=user, activation_token=activation_key, expiration=key_expires)\n            activation_token.save()\n\n            # Send email with activation key\n\n            context = {\n                &#39;url&#39;: &quot;http://%s/auth/sign-up-confirm/%s&quot; % (&#39;example.com&#39;,activation_key,)\n            }\n\n            email_subject = &#39;Account created successfully&#39;\n            email_body = &quot;To activate your account, visit this link: &quot; \\\n                         &quot;http://%s/auth/sign-up-confirm/%s&quot; \\\n                         % (&#39;example.com&#39;,activation_key,)\n\n            template = get_template(&#39;authentication/email-signup-confirmation.html&#39;)\n\n            send_mail(\n                email_subject,\n                email_body,\n                &#39;sender_email@gmail.com&#39;,\n                [email],\n                fail_silently=False,\n                html_message=template.render(context))\n            # return reverse_lazy(&#39;index&#39;)\n        self.userformerrors = userform.errors\n        return render(request, self.template_name, self.get_context_data(**kwargs))\n\n    def get(self, request, *args, **kwargs):\n        if request.user.is_authenticated():\n            return HttpResponseRedirect(reverse_lazy(&#39;index&#39;))\n        else:\n            return render(request, self.template_name, self.get_context_data(**kwargs))\n\n\nclass SignUpConfirm(TemplateView):\n    &quot;&quot;&quot;\n    Account verification view. Validates the token and activates the user for the platform\n    &quot;&quot;&quot;\n    template_name = &#39;authentication/sign-up-confirm.html&#39;\n\n    def get(self, request, *args, **kwargs):\n\n        if self.request.user.is_authenticated():\n            HttpResponseRedirect(reverse_lazy(&#39;index&#39;))\n        try:\n            activation_token = UserProfile.objects.get(activation_token=self.kwargs[&#39;token&#39;])\n        except UserProfile.DoesNotExist:\n            return render(\n                request,\n                self.template_name,\n                {\n                    &#39;status&#39;: _(&#39;Invalid URL&#39;)\n                }\n            )\n\n        if activation_token.expiration &lt; timezone.now():\n            return render(\n                request,\n                self.template_name,\n                {\n                    &#39;status&#39;: _(&#39;Expired URL&#39;)\n                }\n            )\n\n        user = activation_token.user\n        user.is_active = True\n        user.save()\n        return render(\n            request,\n            self.template_name,\n            {\n                &#39;status&#39;: _(&#39;Your account has been activated, please log in&#39;)\n            }\n        )</code></pre></div>\n<p>En el archivo views tendremos 2 vistas, la primera de Registro, que en primera instancia crea un usuario, y luego genera un hash que servirá para activar el usuario, al final se envía un correo electrónico con el vínculo de activación</p>\n<blockquote>\n<p>Es importante que cambie  <code class=\"language-text\">example.com</code> y <code class=\"language-text\">sender_email@gmail.com</code> por valores reales. Para ambientes de desarrollo, puede usar <code class=\"language-text\">localhost</code> o <code class=\"language-text\">127.0.0.1</code></p>\n</blockquote>\n<p>La siguiente vista simplemente verica que el token exista y si existe, activa el usuario.</p>\n<p>El archivo de <strong>urls.py</strong> debería quedar similar a esto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># -*- coding: utf-8 -*-\nfrom django.conf.urls import url\nfrom django.core.urlresolvers import reverse_lazy\n\nfrom django.contrib.auth import views as auth_views\n\nfrom . import views\n\nurlpatterns = [\n\n    # Sign Up\n    url(\n        r&#39;sign-up/$&#39;,\n        views.SignUp.as_view(),\n        name=&#39;sign_up&#39;\n    ),\n    url(\n        r&#39;sign-up-confirm/(?P&lt;token&gt;\\w+)/$&#39;,\n        views.SignUpConfirm.as_view(),\n        name=&#39;sign_up_confirm&#39;\n    ),\n]</code></pre></div>\n<p>Por último recuerde tener la configuración de su servidor SMTP en su archivo <strong>settings.py</strong>, que podría ser gmail</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">EMAIL_HOST = &#39;smtp.gmail.com&#39;\nEMAIL_HOST_USER = &#39;myname@gmail.com&#39;\nEMAIL_HOST_PASSWORD = &#39;mypassword&#39;\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nDEFAULT_FROM_EMAIL = &#39;nmyname@gmail.com&#39;</code></pre></div>\n<blockquote>\n<p>Para habilitar el envío de correos electrónicos desde gmail, debe habilitar el acceso desde aplicaciones menos seguras, puede informarse mejor en <a href=\"https://support.google.com/accounts/answer/6010255?hl=es-419\">este enlace</a></p>\n</blockquote>\n<p>Por último los archivos de templates:</p>\n<p><strong>sign-up.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% extends &quot;base.html&quot; %}\n{% load i18n %}\n{% block title %}\n    {% trans &#39;Sign up&#39; %}\n{% endblock %}\n\n{% block content %}\n    &lt;div class=&quot;container center&quot;&gt;\n        &lt;div class=&quot;row&quot;&gt;\n            &lt;h1&gt;{% trans &#39;Sign up&#39; %}&lt;/h1&gt;\n        &lt;/div&gt;\n                {% if user.is_authenticated %}\n                    {% if user.is_anonymous %}\n                        {% trans &#39;Please activate your account&#39;%}\n                    {% else %}\n                        {% blocktrans %}\n                            You are logged as {{ user.username }}\n                        {% endblocktrans %}\n                        &lt;a href=&quot;{% url &#39;log-out&#39; %}&quot;&gt;{% trans &#39;Log out&#39; %}&lt;/a&gt;\n                    {% endif %}\n                {%  else %}\n\n                    {% if userformerrors %}\n                        {{ userformerrors }}\n                    {% endif %}\n                    &lt;form method=&quot;POST&quot;&gt;\n                    {%  csrf_token %}\n                        {% for item in userform %}\n                            &lt;div class=&quot;input-field&quot;&gt;\n                                &lt;label for=&quot;{{ item.name }}&quot;&gt;{{ item.label }}&lt;/label&gt;\n                                {{ item }}\n                            &lt;/div&gt;\n                        {% endfor %}\n\n                      &lt;button type=&quot;submit&quot; class=&quot;btn waves-effect waves-light&quot;&gt;\n                          {% trans &#39;Sign up&#39; %}\n                          &lt;i class=&quot;mdi-content-send right&quot;&gt;&lt;/i&gt;\n                      &lt;/button&gt;\n                  &lt;/form&gt;\n                {%  endif %}\n\n    &lt;/div&gt;\n{% endblock %}</code></pre></div>\n<p>y <strong>sign-up-confirm.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% extends &quot;base.html&quot; %}\n{% load i18n %}\n{% block title %}\n    {% trans &#39;Sign up successfully&#39; %}\n{% endblock %}\n\n{% block content %}\n    &lt;div class=&quot;container center&quot;&gt;\n        &lt;div class=&quot;row&quot;&gt;\n            &lt;h1&gt;{% trans &#39;Sign up confirm&#39; %}&lt;/h1&gt;\n        &lt;/div&gt;\n        &lt;p&gt;{{ status }}&lt;/p&gt;\n    &lt;/div&gt;\n{% endblock %}</code></pre></div>\n<p>El código fuente registrado aquí es una abstracción del <a href=\"http://git.contraslash.com/ma0/authentication-django\">módulo de autenticación</a> que usamos aquí en contraslash, siéntase libre de participar en el o usarlo para su proyecto</p>","frontmatter":{"title":"Registro de usuarios y confirmación por email en Django 2.0","date":"October 19, 2016","description":"Registro con confirmación vía correo electrónico con Gmail y Django"}}},"pageContext":{"slug":"/124-registro-de-usuarios-y-confirmacion-por-email-en-d/","previous":{"fields":{"slug":"/123-dev-ops-para-django/"},"frontmatter":{"title":"Dev Ops para Django"}},"next":{"fields":{"slug":"/125-introduccion-a-la-programacion-en-python/"},"frontmatter":{"title":"Introducción a la programación en Python"}}}}}