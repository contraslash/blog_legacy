{"componentChunkName":"component---src-templates-blog-post-js","path":"/143-select-multiple-al-estilo-del-admin-de-django/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"2d124b85-f9a8-5973-a819-51b6da2e2837","excerpt":"Select Multiple al estilo del Admin de Django Debo admitir que siempre me pareció muy elegante la propuesta de Django en el administrador de usuarios por…","html":"<h1>Select Multiple al estilo del Admin de Django</h1>\n<p>Debo admitir que siempre me pareció muy elegante la propuesta de Django en el administrador de usuarios por defecto, donde los permisos se añaden de un panel a otro, como en esta imagen:\n<img src=\"https://i.stack.imgur.com/ybe24.png\" alt=\"Administrador de Django, Manejo de Permisos en vista de usuarios por defecto\"></p>\n<p>En un proyecto se me ocurrió utilizar algo similar, pero para mi desgracia, no encontré lo que buscaba, así que decidí usar el que viene en el administrador de Django, y no fue para nada complicado, a continuación una corta abstracción de los pasos necesarios.</p>\n<p><em>forms.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django import forms\nfrom django.contrib.admin.widgets import FilteredSelectMultiple\n\n....\n\n\nclass MiFormulario(forms.Form):\n    mi_campo = forms.ModelMultipleChoiceField(\n        queryset=MiModelo.objects.all(),\n        widget=FilteredSelectMultiple(\n            &quot;Nombre del campo&quot;,\n            is_stacked=False,\n        ),\n    )</code></pre></div>\n<p>Aquí lo único distinto es que usamos el Widget FilteredSelectMultiple que está en los widgets del admin.</p>\n<p><em>views.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.views.generic import FormView\nfrom . import forms\n\n...\n\nclass MiVistaDelFormulario(FormView):\n    template_name = &quot;my_app/form_view.html&quot;\n    form_class = forms.MiFormulario\n    success_url = &quot;/&quot;</code></pre></div>\n<p>Esta es una vista basada en clases común y corriente.</p>\n<p><em>my<em>app/form</em>view.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% extends &#39;base.html&#39; %}\n{% load staticfiles %}\n{% block specific-css %}\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static &#39;admin/css/widgets.css&#39; %}&quot;/&gt;\n    &lt;script type=&quot;application/javascript&quot; src=&quot;{% static &#39;admin/js/core.js&#39; %}&quot;&gt;&lt;/script&gt;\n{% endblock %}\n{% block content %}\n    ....\n        &lt;form method=&quot;post&quot;&gt;\n            {% csrf_token %}\n            {% for input in form %}\n                {{ input }}\n            {% endfor %}\n                &lt;input type=&quot;submit&quot; value=&quot;Enviar&quot;&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    ....\n{% endblock %}\n{% block static-js %}\n    &lt;script type=&quot;application/javascript&quot; src=&quot;/admin/jsi18n&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;application/javascript&quot;&gt;\n        var django = django || {};\n        django.jQuery = jQuery;\n    &lt;/script&gt;\n    &lt;script type=&quot;application/javascript&quot; src=&quot;{% static &#39;admin/js/SelectBox.js&#39; %}&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;application/javascript&quot; src=&quot;{% static &#39;admin/js/SelectFilter2.js&#39; %}&quot;&gt;&lt;/script&gt;\n\n{% endblock %}</code></pre></div>\n<blockquote>\n<h2>ATENCIÓN</h2>\n<p>  El segundo script que define la variable django.jQuery es una adaptación del archivo que encontramos en <code class=\"language-text\">{% static &#39;admin/js/jquery.init.js&#39; %}</code> que realiza la misma labor pero usando <code class=\"language-text\">jQuery.noConflict</code> que quita las referencias de $ hacia jQuery, si alguna otra librería usa esta <code class=\"language-text\">$</code> como acceso directo y no es jQuery recomiendo usar el archivo <code class=\"language-text\">{% static &#39;admin/js/jquery.init.js&#39; %}</code>, de lo contrario usar esta adaptación</p>\n</blockquote>\n<p>Esta es una abstracción de mi plantilla, suelo usar un esquema de herencia simple, donde mi plantilla base tiene 5 bloques:</p>\n<ul>\n<li>static-css</li>\n<li>specific-css</li>\n<li>content</li>\n<li>static-css</li>\n<li>specific-css</li>\n</ul>\n<p>Lo que hacemos es cargar las librerías del administrador de django para que se carguen los estilos y el javascript.</p>\n<p>Hay algo interesante en la primera línea del static-js, donde se carga la librería de internacionalización, que debemos añadir en nuestro archivo de urls principa\n<em>urls.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">....\nurlpatterns = [\n    ....\n    url(r&#39;^admin/jsi18n/$&#39;, &#39;django.views.i18n.javascript_catalog&#39;),\n    ....\n]</code></pre></div>","frontmatter":{"title":"Select Multiple al estilo del Admin de Django","date":"January 04, 2017","description":"Usando widget del administrador de Django FilteredSelectMultiple en una vista personalizada."}}},"pageContext":{"slug":"/143-select-multiple-al-estilo-del-admin-de-django/","previous":{"fields":{"slug":"/142-usando-los-contenedores-de-singularity-en-htcondor/"},"frontmatter":{"title":"Usando los contenedores de Singularity en HTCondor"}},"next":{"fields":{"slug":"/144-usando-boilerpipe-para-extraer-informacion-de-un-h/"},"frontmatter":{"title":"Usando Boilerpipe para extraer información de un HTML con Python"}}}}}