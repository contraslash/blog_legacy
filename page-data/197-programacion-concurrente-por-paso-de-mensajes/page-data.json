{"componentChunkName":"component---src-templates-blog-post-js","path":"/197-programacion-concurrente-por-paso-de-mensajes/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"dee11db7-2009-5630-9a49-be2388b85849","excerpt":"Programación Concurrente por Paso de Mensajes Definición La programación concurrente por paso de mensajes es un estilo de programación donde entidades…","html":"<h1>Programación Concurrente por Paso de Mensajes</h1>\n<h2>Definición</h2>\n<p>La programación concurrente por paso de mensajes es un estilo de programación donde entidades independientes se comunican asíncronamente por medio de mensajes.</p>\n<h2>Puerto</h2>\n<p>Se define este Tipo Abstracto de Dato con un Identificador P un flujo S.</p>\n<p>Se define una operación Send(P,X) donde por el puerto P se envía el valor X</p>\n<h2>Máquina Abstracta</h2>\n<p>Como es un modelo que extiende del modelo de Programación Concurrente Declarativa, se mantiene la máquina conformada por:</p>\n<ul>\n<li>Almacén Inmutable de datos</li>\n<li>Conjunto de Pilas semánticas</li>\n</ul>\n<p>y se añade un nuevo concepto:</p>\n<p>-Almacén Mutable de Puertos</p>\n<p>Como se extiene del modelo de Programación Concurrente Declarativa, se toma le concepto de <strong>Objeto Flujo</strong>: Un procedimiento recursivo que ejecuta en un hilo propio y se comunica con otros objetos flujo por medio de flujos de entrada y salida.</p>\n<p>Con base en esta definición, se define un <strong>Objeto Puerto</strong> que combina uno o mas puertos con un objeto flujo</p>\n<h2>Multi Agent Systems (MAS)</h2>\n<h3>Modelo:</h3>\n<ul>\n<li>Se basa en el modelo de Programación Concurrente por paso de mensajes</li>\n<li>Un componente es un procedimiento con entradas y salidas tipo Flujo </li>\n<li>Cuando se instancia, se crea un objeto tipo puerto</li>\n</ul>\n<p>Para cada componente se debe definir:</p>\n<ul>\n<li>Protocolo de mensajes</li>\n<li>Diagrama de estado</li>\n</ul>\n<h3>Otra información importante</h3>\n<ul>\n<li>Composición: construcción de un nuevo componente a partir de otros</li>\n<li>Acoplamiento: combinación de instancias de componentes por medio de las entradas y salidas</li>\n<li>Instanciación: creación de una instancia de un componente</li>\n<li>Restricción: definición de la visibilidad de las entradas o salidas de un componente compuesto</li>\n<li>El concepto de puerto permite: el embebimiento de objetos puerto en estructuras de datos y la comunicación muchos a uno</li>\n<li>Los cables de muchos tiros: Se utilizan para flujos de mensajes, pueden enviar cualquier número de mensaje, Se implementan con puertos</li>\n<li>Los diagramas de estado definen como cada uno de  los componentes reacciona con los mensajes recibidos.</li>\n<li>Los cables de muchos tiros: Se implementan con variables de flujo de datos, solamente se puede pasar un mensaje con ellos, se usan para mensajes que no cambian o mensajes de una sola vez</li>\n<li>El diagrama de componentes define como se envían mensajes los componentes, pero no como reaccionan ellos</li>\n<li>Los objetos reactivos no tienen estado</li>\n</ul>","frontmatter":{"title":"Programación Concurrente por Paso de Mensajes","date":"May 04, 2018","description":"Modelo de Programación Concurrente por Paso de Mensajes"}}},"pageContext":{"slug":"/197-programacion-concurrente-por-paso-de-mensajes/","previous":{"fields":{"slug":"/196-analizando-la-seguridad-de-tu-codigo-con-bandit/"},"frontmatter":{"title":"Analizando la seguridad de tu código con Bandit"}},"next":{"fields":{"slug":"/198-palabra-del-dia/"},"frontmatter":{"title":"Palabra del día"}}}}}