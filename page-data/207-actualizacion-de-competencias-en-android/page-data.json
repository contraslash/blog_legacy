{"componentChunkName":"component---src-templates-blog-post-js","path":"/207-actualizacion-de-competencias-en-android/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"c5920ee5-3bd1-545f-bced-b422b6163eb8","excerpt":"Actualización de competencias en Android Diría que han pasado cerca de 6 años desde que inicié el desarrollo de aplicaciones móviles para Android, por esos días…","html":"<h1>Actualización de competencias en Android</h1>\n<p>Diría que han pasado cerca de 6 años desde que inicié el desarrollo de aplicaciones móviles para Android, por esos días recuerdo que se veía todavía muchos dispositivos con android 2.3 Jelly Bean, y Ice Cream apenas estaba de moda, la migración hacia los fragmentos aún era lenta y definitivamente la documentación no estaba como estaba hoy.</p>\n<p>Recuerdo que en mi búsqueda de literatura para el aprendizaje, después de depurar bastante encontré un libro muy apropiado llamado <a href=\"http://www.wrox.com/WileyCDA/WroxTitle/Professional-Android-4th-Edition.productCd-1118949528.html\">Professional Android</a> en su cuarta edición. y era el mejor por mucho.</p>\n<p>Con el tiempo desarrollas tus propias herramientas, te metes de cabeza en tus proyectos, los migras cuando sea necesario y te actualizas regularmente con cada major release, android 5 con ART, android 6 con el manejo de permisos y para ser sincero, mi vida me llevó a enfocarme en infraestructura, operaciones y desarrollo backend.</p>\n<p>Claro, Android no va a cambiar sus componentes arquitecturales, y las actividades de hace 6 años siguen teniendo el mismo ciclo de vida, los fragmentos tampoco han cambiado mucho, pero asistiendo al <a href=\"https://devfest.gdgcali.com/\">DevFest 2018</a> en la ciudad de cali, noté que en la documentación mucho había cambiado desde la última vez.</p>\n<p>No puedo citar con precisión la última vez que visité la documentación oficial de Android, pero recuerdo que <a href=\"https://codelabs.developers.google.com/\">CodeLabs</a> estaba en beta, y algo estaba probando de <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a>, en fin, me suena muy 2017 y este super boom con el Google IO, el lanzamiento de <a href=\"https://developers.google.com/web/tools/lighthouse/?hl=es\">LighSail</a> y bueno, así que supongo que fue hace un año un tanto largo.</p>\n<p>Así que el objetivo de este tiempo dedicado para mi y mi desarrollo de nuevas competencias en nuevas librerías de Google va a quedar aquí como un índice de referencia para cuando deba volver a hacer una app nativa en Android y necesite saber donde llegar.</p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/fundamentals\">Code Fundamentals</a>: Debo decir que realmente no sabía que había un usuario para cada app, lo cual no se si es nuevo o sencillamente jamás lo había leído, pero es super útil saberlo. Por lo general, todo sigue igual: Activities, Intents, Services, Broadcast Recievers, Content Providers, todo estándar.</li>\n<li><a href=\"https://developer.android.com/guide/topics/resources/providing-resources\">Resources</a>: Por mas que odie que no pueda tener un nivel de organización mas profundo en los recursos, los recursos siguen almacenandose en una piscina gigante en las carpetas tradicionales: color, drawable, mipmap, layout, menu, raw, values. Todo lo tradicioan.</li>\n<li><a href=\"https://developer.android.com/guide/topics/manifest/manifest-intro\">Manifest</a>: Esto creo que no cambiará mucho, ni para kotlin, así que mejor ni exploro todos los posibles nodos.</li>\n<li><a href=\"https://developer.android.com/guide/topics/permissions/overview\">Permissions</a>: Esto creo que ya dejó de ser nuevo, porque Android 6 creo que ya hace parte de todo el legacy de android, pero en principio, esa adaptación a solicitar los permisos solo cuando se usan es algo de facto para targets sdk como desde el 23, pero puedo estar equivocado. Diré que está igual.</li>\n<li>\n<p><a href=\"https://developer.android.com/guide/practices/compatibility\">Devices</a>: Tengo una deuda técnica, porque nunca he hecho una app ni para <a href=\"https://developer.android.com/training/wearables/\">wear</a> ni para <a href=\"https://developer.android.com/training/tv/\">TV</a>, y bueno, por extensión <a href=\"https://developer.android.com/training/auto/\">Auto</a> tampoco, en parte porque no tengo el hardware para probar, pero se que si en algún momento debo saldar a deuda, por aquí debo iniciar por aquí.</p>\n<p>Disclaimer: La parte de devices viene con dos puntos adicionales: </p>\n<ul>\n<li><a href=\"https://developer.android.com/things/get-started/\">Things</a></li>\n<li><a href=\"https://developer.android.com/chrome-os/intro\">Chrome OS</a></li>\n</ul>\n<p>Pero, mi experiencia con things no fue muy apreciada, y la alternativa, al menos para los casos de uso que he manejado los manejo con <a href=\"https://www.raspberrypi.org/\">RPI</a> y <a href=\"https://www.raspberrypi.org/downloads/raspbian/\">Raspbian</a>, así que mas que cubierto, con respecto a Chrome OS, pues, para mi siguen siendo PWAs así que no les prestaré mucha atención.</p>\n</li>\n</ul>\n<p>Ahora si pasemos al contenido denso:</p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/activities/intro-activities\">Activities</a>: Como decía antes, esto dudo que cambie, lo que si veo ahora es que se hace mucho énfasis a presentar <a href=\"https://kotlinlang.org/\">Kotlin</a> como primera opción, creo que va en parte con la idea de Google de soltar <a href=\"https://www.java.com/es/download/\">Java</a>, así que Kotlin va a ser el lugar para comenzar esta actualización.</li>\n<li><a href=\"https://developer.android.com/guide/components/fragments\">Fragments</a>: Same old things, aunque creo que ya por fin nos podemos librar del appcompat 4 y 7, lo cual es en serio un alivio para mi, por todos los problemas que me causó en el pasado.</li>\n<li>\n<p><a href=\"https://developer.android.com/jetpack/\">JetPack</a>: Este es el punto donde debo parar de hacer el review y hacer mi primera app, por lo que se observa existen varios conceptos importantes:</p>\n<ul>\n<li><a href=\"https://developer.android.com/topic/libraries/support-library/androidx-overview\">AndroidX</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\">Lifecycle Aware Components</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/livedata\">LiveData</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel\">ViewModel</a></li>\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/room\">Room</a></li>\n</ul>\n</li>\n</ul>\n<p>Creo que mas allá todo parece ser lo estándar, pero veo que ahora con estos 5 componentes voy a encontrarme de nuevo en el Bleeding Edge de Android, y por lo que veo, va a existir una migración masiva a componentes reactivos.</p>\n<p>Mas adelante posiblemente explore cada una de estas temáticas independientes, tal vez para ser publicadas en mi <a href=\"https://medium.com/@ma0collazos\">blog de medium</a>, pero por ahora creo que será tiempo de poner manos al código</p>","frontmatter":{"title":"Actualización de competencias en Android","date":"September 30, 2018","description":"Un compendio de enlaces útiles a la documentación oficial de Android, como han cambiado en los últimos dos años y un índice de enlaces importantes"}}},"pageContext":{"slug":"/207-actualizacion-de-competencias-en-android/","previous":{"fields":{"slug":"/206-analisis-de-vulnerabilidades-desde-docker/"},"frontmatter":{"title":"Análisis de vulnerabilidades desde docker"}},"next":{"fields":{"slug":"/208-creacion-de-marca/"},"frontmatter":{"title":"Creación de Marca"}}}}}