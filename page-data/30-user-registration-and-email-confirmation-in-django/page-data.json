{"componentChunkName":"component---src-templates-blog-post-js","path":"/30-user-registration-and-email-confirmation-in-django/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"05ca049d-4384-5781-a4e5-ea99e57962a2","excerpt":"Registro de usuarios y confirmación por email en Django Le sugerimos visitar la  versión 2.0 de este post Fuente original: User registration and email…","html":"<h1>Registro de usuarios y confirmación por email en Django</h1>\n<blockquote>\n<p>Le sugerimos visitar la  <a href=\"http://blog.contraslash.com/registro-de-usuarios-y-confirmacion-por-email-en-d/\">versión 2.0</a> de este post</p>\n</blockquote>\n<h2>Fuente original:</h2>\n<p><a href=\"http://ipasic.com/article/user-registration-and-email-confirmation-django/\">User registration and email confirmation in Django</a> por Ivan Pasic</p>\n<p>A pesar que hoy en día casi todo el mundo usa la applicación django-registration para proveer la funcionalidad de registro, tal vez algunos de ustedes todavía quieren aprender a crear por su cuenta o al menos aprender los proncipios básicos  de como  funciona esto.</p>\n<p>Es por eso que trataré de explicarte como escribir tu propio formulario y vista de registro para un usuario y luego enviarle un email con un vínculo de activación, así el puede confirmar su dirección de correo electrónico cosa que a veces es muy importante.</p>\n<blockquote>\n<p>Nota: No estoy enseñando algo nuevo y diferente, la mayoría de estos principios son iguales que en django-registration, pero esta vez es solo para que tengas una idea de como aprender a hacerlo por ti mismo</p>\n</blockquote>\n<p>Podemos utilizar el sistema de autenticación incluido en Django, pero nosotros podemos extenderlo y agregar algunos campos, como nombre, apellido, email, etc.</p>\n<p>Así que primero creamos nuestro archivo forms.py con nuestra aplicación</p>\n<h6>forms.py</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\n\nclass RegistrationForm(UserCreationForm):\n    email = forms.EmailField(required=True, widget=forms.TextInput(attrs={&#39;placeholder&#39;: &#39;E-mail address&#39;}))\n    first_name = forms.CharField(required=True)\n    last_name = forms.CharField(required=True)\n\n    class Meta:\n        model = User\n        fields = (&#39;first_name&#39;, &#39;last_name&#39;, &#39;email&#39;, &#39;username&#39;, &#39;password1&#39;, &#39;password2&#39;)</code></pre></div>\n<p>Ahora vamos a extender el formulario de registro basándonos en el formulario UserCreationForm</p>\n<p>Pero antes de comenzar a escribir nuestra vista, existen algunas cosas mas que debemos hacer con nuestro RegistrationForm.\nPrimero, probablemente queremos verificar si el email que el usuario a ingresado está siendo usado por otro usuario, y en ese caso levantar una excepción\nAdemás de eso, probablemente también queremos que nuestro nuevo usuario registrado confirme su dirección de correo electrónico enviándole algún vínculo de activación, en el que el pueda dar click. Para eso necesitamos modificar nuestro método <strong>form.save()</strong>, el cual usaremos mas tarde para declarar que un usuario no esta activo, definiendo <code class=\"language-text\">is_active = False</code> </p>\n<p>Así que agregemos esto a nuestro forms.py</p>\n<h6>forms.py</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#clean email field\ndef clean_email(self):\n    email = self.cleaned_data[&quot;email&quot;]\n    try:\n        User._default_manager.get(email=email)\n    except User.DoesNotExist:\n        return email\n    raise forms.ValidationError(&#39;email duplicado&#39;)\n\n#modificamos el método save() así podemos definir  user.is_active a False la primera vez que se registra\ndef save(self, commit=True):        \n    user = super(RegistrationForm, self).save(commit=False)\n    user.email = self.cleaned_data[&#39;email&#39;]\n    if commit:\n        user.is_active = False # No está activo hasta que active el vínculo de verificación\n        user.save()\n\n    return user</code></pre></div>\n<p>Antes de escribir nuestras vistas, vamos a crear un modelo <strong>UserProfile</strong>, que está atado a <strong>User</strong>. Esto es importante y útil, porque aquí almacenaremos el token de activación y definiremos la fecha de vencimiento del token. Por ahora creemos el modelo, pronto entenderás de que estoy hablando.</p>\n<h6>models.py</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class UserProfile(models.Model):\n    user = models.OneToOneField(User)\n    activation_key = models.CharField(max_length=40, blank=True)\n    key_expires = models.DateTimeField(default=datetime.date.today())\n\n    def __str__(self):\n        return self.user.username\n\n    class Meta:\n        verbose_name_plural=u&#39;Perfiles de Usuario&#39;</code></pre></div>\n<p>Ahora podemos comenzar a escribir nuestra vistas.\nPrimero escribamos nuestro formulario de Registro.</p>\n<h6>views.py</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.shortcuts import render_to_response, get_object_or_404\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.contrib import auth\nfrom django.core.context_processors import csrf\nfrom forms import *\nfrom models import *\nfrom django.template import RequestContext\nfrom django.core.mail import send_mail\nimport hashlib, datetime, random\nfrom django.utils import timezone\n\ndef register_user(request):\n    args = {}\n    args.update(csrf(request))\n    if request.method == &#39;POST&#39;:\n        form = RegistrationForm(request.POST)\n        args[&#39;form&#39;] = form\n        if form.is_valid(): \n            form.save()  # guardar el usuario en la base de datos si es válido\n            username = form.cleaned_data[&#39;username&#39;]\n            email = form.cleaned_data[&#39;email&#39;]\n            salt = hashlib.sha1(str(random.random())).hexdigest()[:5]            \n            activation_key = hashlib.sha1(salt+email).hexdigest()            \n            key_expires = datetime.datetime.today() + datetime.timedelta(2)\n\n            #Obtener el nombre de usuario\n            user=User.objects.get(username=username)\n\n            # Crear el perfil del usuario                                                                                                                                 \n            new_profile = UserProfile(user=user, activation_key=activation_key, \n                key_expires=key_expires)\n            new_profile.save()\n\n            # Enviar un email de confirmación\n            email_subject = &#39;Account confirmation&#39;\n            email_body = &quot;Hola %s, Gracias por registrarte. Para activar tu cuenta da clíck en este link en menos de 48 horas: http://127.0.0.1:8000/accounts/confirm/%s&quot; % (username, activation_key)\n\n            send_mail(email_subject, email_body, &#39;myemail@example.com&#39;,\n                [email], fail_silently=False)\n\n            return HttpResponseRedirect(&#39;/accounts/register_success&#39;)\n    else:\n        args[&#39;form&#39;] = RegistrationForm()\n\n    return render_to_response(&#39;user_profile/register.html&#39;, args, context_instance=RequestContext(request))</code></pre></div>\n<p>La mayoría de este código podría ser familiar para tí, si tienes algún conocimiento básico escribiendo formularios en Django, pero en lo que estamos interesados aquí es en la parte del token de autenticación y el envío de un correo electrónico.</p>\n<p>Así, como puedes ver, si nuestro formulario es válido (no hay errores) entonces llamaremos al método <strong>save()</strong>, que previamente modificamos en <strong>forms.py</strong></p>\n<p>Eso creará nuestro nuevo usuario, pero ese usuario todavía no está activo, así que debemos generar algún token de activación que le podemoe enviar, con el que podrá activar su cuenta.</p>\n<p>Para generar el token de activación, hemos utilizado los módulos <strong>random</strong> y <strong>hashlib</strong>, porque queremos un número aleatorio para generar un cifrado SHA1. Combinamos eso con la <em>sal</em> y el correo del usuario para obtener un token de activación que será enviado al usuario.</p>\n<p>Pero antes de enviar el correo al usuario, queremos definir una fecha cuando el token de activación caduque. Así que vamos a definir un tiempo de vida, que en este caso es de 2 días. Si el usuario da click en el vínculo luego de dos días, el no podrá activar su cuenta.</p>\n<p>Después de eso, vamos a crear y guardar un nuevo <strong>UserProfile</strong> que estará cibectadi al <strong>User</strong> que acabamos de crear y le pasaremos el token de activación y la fecha de vencimiento que acabamos de crear.</p>\n<p>Después enviaremos el correo al usuario con su token de activación y algún texto apropiado, para eso usamos la función <strong>send_mail</strong> de Django. Si nunca has usado esta función te recomendamos leer mas de ella <a href=\"https://docs.djangoproject.com/en/1.8/topics/email/\">aquí</a></p>\n<p>De cualquier manera, es importante definir la configuración del envío de correos en <strong>setting.py</strong>, por ejemplo, si usas una cuenta de gmail, podría verse algo así</p>\n<h6>settings.py</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">EMAIL_HOST = &#39;smtp.gmail.com&#39;\nEMAIL_HOST_USER = &#39;myname@gmail.com&#39;\nEMAIL_HOST_PASSWORD = &#39;mypassword&#39;\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nDEFAULT_FROM_EMAIL = &#39;nmyname@gmail.com&#39;</code></pre></div>\n<p>Nuestro registro.html podría verse así</p>\n<h6>registro.html</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% extends &quot;base.html&quot; %}\n\n{% block content %}            \n&lt;form class=&quot;form-signup&quot; action=&quot;/accounts/sign_up/&quot; method=&quot;post&quot;&gt;{% csrf_token %}\n    &lt;h2&gt;Crea tu cuenta&lt;/h2&gt;\n    &lt;div class=&quot;fieldWrapper&quot;&gt;\n        &lt;label&gt;Nombre&lt;/label&gt;&lt;br&gt;\n        {{ form.first_name }}\n    &lt;/div&gt;    \n    &lt;br&gt;\n    &lt;div class=&quot;fieldWrapper&quot;&gt;\n        &lt;label&gt;Apellido&lt;/label&gt;&lt;br&gt;\n        {{ form.last_name }}\n    &lt;/div&gt;    \n    &lt;br&gt;\n    &lt;div class=&quot;fieldWrapper&quot;&gt;    \n        {{ form.email.errors }}            \n        &lt;label&gt;E-mail&lt;/label&gt;&lt;br&gt;\n        {{ form.email }}\n    &lt;/div&gt;    \n    &lt;br&gt;\n    &lt;div class=&quot;fieldWrapper&quot;&gt;\n    {{form.errors.values.0}}                \n        &lt;label&gt;Nombre de Usuario&lt;/label&gt;&lt;br&gt;\n        {{ form.username }}\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;div class=&quot;fieldWrapper&quot;&gt;        \n        {{form.errors.values.1}}            \n        &lt;label&gt;Contraseña&lt;/label&gt;&lt;br&gt;                    \n        {{ form.password1 }}\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;div class=&quot;fieldWrapper&quot;&gt;           \n        &lt;label&gt;Contraseña de nuevo&lt;/label&gt;&lt;br&gt;\n        {{ form.password2 }}\n    &lt;/div&gt;            \n    &lt;br&gt;&lt;/br&gt;\n    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;btn btn-primary&quot; value=&quot;Crear cuenta&quot;&gt;\n&lt;/form&gt;\n\n{% endblock %}</code></pre></div>\n<p>Ahora definamos nuestra vista para activar una nueva cuenta.\nSi tu quieres que esta vista funcione, es importante que definas tus urls para obtener el token de activación y pasarlo como argumento. mira el archivo <strong>urls.py</strong> al final de este tutorial para que tengas idea. </p>\n<h6>views.py</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def register_confirm(request, activation_key):\n    # Verifica que el usuario ya está logeado\n    if request.user.is_authenticated():\n        HttpResponseRedirect(&#39;/home&#39;)\n\n    # Verifica que el token de activación sea válido y sino retorna un 404\n    user_profile = get_object_or_404(UserProfile, activation_key=activation_key)\n\n    # verifica si el token de activación ha expirado y si es así renderiza el html de registro expirado\n    if user_profile.key_expires &lt; timezone.now():\n        return render_to_response(&#39;user_profile/confirm_expired.html&#39;)\n    # Si el token no ha expirado, se activa el usuario y se muestra el html de confirmación\n    user = user_profile.user\n    user.is_active = True\n    user.save()\n    return render_to_response(&#39;user_profile/confirm.html&#39;)</code></pre></div>\n<p>Aquí está como yo configuré mi <strong>urls.py</strong>, por favor tengan cuidado de como van a definir sus urls y como van a llamar al HttpResponseRedirect en su <strong>views.py</strong>. Si llamas a un url que no existe, vas a tener un error. La mismca cosa con el token de activación del usuario. Si la url de activación no existe, el usuario no podrá tener una activación exitosa.</p>\n<h6>urls.py</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.conf.urls import patterns, include, url\n\nfrom django.contrib import admin\nadmin.autodiscover()\n\nurl(r&#39;^sign_up/&#39;, (&#39;yourappname.views.register_user&#39;)),\n    url(r&#39;^register_success/&#39;, (&#39;yourappname.views.register_success&#39;)),\n    url(r&#39;^confirm/(?P&lt;activation_key&gt;\\w+)/&#39;, (&#39;yourappname.views.register_confirm&#39;)),\n)</code></pre></div>\n<p>Eso es todo para este post, ahora tu deberías saber como crear y extender los formularios de registro con una confirmación de email :)</p>\n<p>Espero que lo hayas encontrado entretenido y útil</p>\n<blockquote>\n<p>Si consideras que hay un error en la traducción o existe algo que se pueda mejorar, no dudes en mandarme un <a href=\"mailto://ma0@contraslash.com\">email</a></p>\n</blockquote>","frontmatter":{"title":"Registro de usuarios y confirmación por email en Django","date":"January 29, 2016","description":"Registro y confirmación de usuarios en Django usando GMail"}}},"pageContext":{"slug":"/30-user-registration-and-email-confirmation-in-django/","previous":{"fields":{"slug":"/32-custom-password-recovery/"},"frontmatter":{"title":"Recuperación de contraseña personalizada"}},"next":{"fields":{"slug":"/31-show-errors-django/"},"frontmatter":{"title":"Mostrar errores Formularios Django"}}}}}