{"componentChunkName":"component---src-templates-blog-post-js","path":"/51-navigationview-android-material/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"0ba7fcb7-727d-57c6-aa48-10e7eb31a902","excerpt":"NavigationView Android Material Definitivamente tener una lista de enlaces útiles  que saquen de apuros es algo maravilloso, y este artículo definitivamente me…","html":"<h1>NavigationView Android Material</h1>\n<p>Definitivamente tener una lista de enlaces útiles  que saquen de apuros es algo maravilloso, y <a href=\"http://blog.xebia.com/2015/06/09/android-design-support-navigationview/\">este artículo</a> definitivamente me ha sacado de apuros mas de una vez.</p>\n<p>Para la definición del layout principal necesitaremos una estructura similar a esta</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;android.support.v4.widget.DrawerLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    android:id=&quot;@+id/main_drawer_layout&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:fitsSystemWindows=&quot;true&quot;&gt;\n\n   &lt;!-- Main Content Here! --&gt;\n&lt;android.support.design.widget.NavigationView\n        android:id=&quot;@+id/navigation&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;match_parent&quot;\n        android:layout_gravity=&quot;start&quot;\n        android:background=&quot;@color/white&quot;\n        app:itemIconTint=&quot;@color/primary&quot;\n        app:itemTextColor=&quot;@color/primary_dark&quot;\n        app:menu=&quot;@menu/drawer&quot;\n\n        /&gt;\n&lt;/android.support.v4.widget.DrawerLayout&gt;</code></pre></div>\n<p>app:menu nos refiere a un archivo que debemos colocar en la carpeta menus de res</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    &lt;group android:checkableBehavior=&quot;single&quot;&gt;\n\n        &lt;item\n            android:id=&quot;@+id/menu_drawer_it1&quot;\n            android:icon=&quot;@drawable/drawable1&quot;\n            android:title=&quot;@string/some_string&quot;/&gt;\n\n        &lt;!-- Other items here --&gt;\n\n    &lt;/group&gt;\n&lt;/menu&gt;</code></pre></div>\n<p>En la actividad que contiene el navigationview necesitaremos algo parecido a esto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Imports over here\n\npublic class MainActivity extends AppCompatActivity implements\n        NavigationView.OnNavigationItemSelectedListener\n{\n    DrawerLayout mDrawerLayout;\n    private ActionBarDrawerToggle mDrawerToggle;\n    private final Handler mDrawerActionHandler = new Handler();\n    private int mNavItemId;\n\n    private static final String NAV_ITEM_ID = &quot;nav_item_id&quot;;\n    private static final long DRAWER_CLOSE_DELAY_MS = 250;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // Other things in here\n        if (null == savedInstanceState) {\n            mNavItemId = R.id.menu_drawer_it1;\n        } else {\n            mNavItemId = savedInstanceState.getInt(NAV_ITEM_ID);\n        }\n\n        mDrawerLayout = (DrawerLayout) findViewById(R.id.main_drawer_layout);\n\n        NavigationView navigationView = (NavigationView) findViewById(R.id.navigation);\n        LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\n        navigationView.setNavigationItemSelectedListener(this);\n\n        // select the correct nav menu item\n        MenuItem menuItem = navigationView.getMenu().findItem(mNavItemId);\n        if(menuItem!=null)\n        {\n            menuItem.setChecked(true);\n        }\n\n\n        // set up the hamburger icon to open and close the drawer\n        mDrawerToggle = new ActionBarDrawerToggle(\n                this,\n                mDrawerLayout,\n                mToolbar,\n                R.string.open,\n                R.string.close\n        );\n        mDrawerLayout.setDrawerListener(mDrawerToggle);\n        mDrawerToggle.syncState();\n\n        navigate(mNavItemId);\n\n        // More things over here\n\n    }\n\n    @Override\n    public boolean onNavigationItemSelected(final MenuItem menuItem) {\n        // update highlighted item in the navigation menu\n        menuItem.setChecked(true);\n        mNavItemId = menuItem.getItemId();\n\n        // allow some time after closing the drawer before performing real navigation\n        // so the user can see what is happening\n        mDrawerLayout.closeDrawer(GravityCompat.START);\n        mDrawerActionHandler.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                navigate(menuItem.getItemId());\n            }\n        }, DRAWER_CLOSE_DELAY_MS);\n        return true;\n    }\n    private void navigate(final int itemId) {\n        // perform the actual navigation logic, updating the main content fragment etc\n        switch (itemId) {\n\n        }\n    }\n\n    @Override\n    public void onConfigurationChanged(final Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        mDrawerToggle.onConfigurationChanged(newConfig);\n    }\n    @Override\n    protected void onSaveInstanceState(final Bundle outState) {\n        super.onSaveInstanceState(outState);\n        outState.putInt(NAV_ITEM_ID, mNavItemId);\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (mDrawerLayout.isDrawerOpen(GravityCompat.START)) {\n            mDrawerLayout.closeDrawer(GravityCompat.START);\n        } else if(mDrawerLayout.isDrawerOpen(GravityCompat.END)){\n            mDrawerLayout.closeDrawer(GravityCompat.END);\n        } else {\n            super.onBackPressed();\n        }\n    }\n\n    @Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        // Sync the toggle state after onRestoreInstanceState has occurred.\n        mDrawerToggle.syncState();</code></pre></div>\n<p>También necesitamos añadir algunos strings en res</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    &lt;string name=&quot;open&quot;&gt;Abrir&lt;/string&gt;\n    &lt;string name=&quot;close&quot;&gt;Cerrar&lt;/string&gt;</code></pre></div>\n<blockquote>\n<p>ATENCIÓN: Los snippets anteriores son solo una plantilla, deben ajustarse a la necesidad específica de cada proyecto</p>\n</blockquote>","frontmatter":{"title":"NavigationView Android Material","date":"January 29, 2016","description":"Implementación de un NavigationView en Android usando las librerías de compatiblidad para Material Design de Google"}}},"pageContext":{"slug":"/51-navigationview-android-material/","previous":{"fields":{"slug":"/53-crf/"},"frontmatter":{"title":"CSRF Exempt en vistas basadas en clases"}},"next":{"fields":{"slug":"/52-android-material-tabs/"},"frontmatter":{"title":"Android Material Tabs"}}}}}