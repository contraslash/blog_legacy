{"componentChunkName":"component---src-templates-blog-post-js","path":"/139-usando-racket-para-consumir-una-api-rest/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"a79126ff-e7b6-5b2f-89d8-5d2fb128e28e","excerpt":"Usando Racket para consumir una API REST Consumir una API Rest en Racket es uno de los menesteres mas sencillos que un programador de este lenguaje puede…","html":"<h1>Usando Racket para consumir una API REST</h1>\n<p>Consumir una API Rest en Racket es uno de los menesteres mas sencillos que un programador de este lenguaje puede imaginar, basta con importar un par de librerías para empezar a escribir el programa. En este post (¿si lo entienden?… post), vamos a usar la API pública de <a href=\"https://jsonplaceholder.typicode.com/\">jsonplaceholder</a> como ejemplo:</p>\n<h3>Método Get</h3>\n<p>El método mas común en una API REST es el get, el cual te permite tomar toda la información disponible en ese endpoint. De esta forma podemos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(require json)\n(require net/url)\n\n(call/input-url \n   (string-&gt;url &quot;https://jsonplaceholder.typicode.com/albums&quot;)\n   get-pure-port\n   read-json\n)\n\n(call/input-url \n   (string-&gt;url &quot;https://jsonplaceholder.typicode.com/posts/1&quot;)\n   get-pure-port\n   read-json\n)</code></pre></div>\n<h3>Método Post</h3>\n<p>Este es uno de los métodos mas complicados, ya que no basta con usar la Url sino que tambien se debe agregar cierta información en el cuerpo del mensaje. </p>\n<p>El cuerpo del mensaje debe estar codificado en alguno de estos estandares:</p>\n<ul>\n<li>application/x-www-form-urlencoded (Por defecto)</li>\n<li>multipart/form-data</li>\n<li>text/plain</li>\n</ul>\n<p>Así que si quieres transmitir información binaria o con un tamaño considerable deberias usar <code class=\"language-text\">multipart/form-data</code>. De lo contrario, usa <code class=\"language-text\">application/x-www-form-urlencoded</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(require json)\n(require net/url)\n(require net/uri-codec)\n\n(call/input-url \n   (string-&gt;url &quot;https://jsonplaceholder.typicode.com/posts/&quot;)\n   (lambda (url)\n     (post-pure-port url\n                     (string-&gt;bytes/utf-8 (alist-&gt;form-urlencoded\n                                           (list (cons &#39;userId &quot;1&quot;)\n                                                 (cons &#39;title &quot;Soy un titulo&quot;)\n                                                 (cons &#39;body &quot;Hola mundo&quot;))))))\n   read-json\n)</code></pre></div>\n<h3>Métodos PUT, PATCH y DELETE</h3>\n<p>Los demas métodos se comportan muy parecido a GET y POST pero cambia el nombre de la función que crea el puerto (por ejemplo: put-pure-port, delete-pure-port).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(call/input-url \n   (string-&gt;url &quot;https://jsonplaceholder.typicode.com/posts/1&quot;)\n   (lambda (url)\n     (put-pure-port url\n                     (string-&gt;bytes/utf-8 (alist-&gt;form-urlencoded\n                                           (list (cons &#39;userId &quot;1&quot;)\n                                                 (cons &#39;title &quot;Soy un titulo&quot;)\n                                                 (cons &#39;body &quot;Hola mundo&quot;))))))\n   read-json\n)</code></pre></div>\n<h3>Enviando un archivo</h3>\n<p>Enviar un archivo no es muy complejo, basta con codificar el cuerpo del post bajo <code class=\"language-text\">multipart/form-data</code>, lo veremos en el siguiente tutorial.</p>\n<h1>Referencias</h1>\n<p><a href=\"https://docs.racket-lang.org/net/url.html?q=put-pure-port#%28def._%28%28lib._net%2Furl..rkt%29._put-pure-port%29%29\">Documentación oficial de racket</a></p>","frontmatter":{"title":"Usando Racket para consumir una API REST","date":"December 15, 2016","description":"A veces es necesario consumir los recursos de una api que usa la especificación REST desde nuestro programa escrito en Racket, es entonces cuando nos preguntamos ¿cómo podriamos hacerlo?"}}},"pageContext":{"slug":"/139-usando-racket-para-consumir-una-api-rest/","previous":{"fields":{"slug":"/137-reglas-para-desarrollar-codigo-seguro/"},"frontmatter":{"title":"Reglas para desarrollar código seguro"}},"next":{"fields":{"slug":"/140-deep-learning-segun-andrew-ng/"},"frontmatter":{"title":"Deep Learning según Andrew Ng"}}}}}