{"componentChunkName":"component---src-templates-blog-post-js","path":"/146-automatizar-despliegues-de-django-con-fabric-y-ans/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"742b583c-3242-5059-9496-31c6fd3af608","excerpt":"Automatizar despliegues de Django con Fabric y Ansible Este post está basado en el post de Real Python Automating Django Deployments With Fabric and Ansible En…","html":"<h1>Automatizar despliegues de Django con Fabric y Ansible</h1>\n<p>Este post está basado en el post de <a href=\"https://realpython.com\">Real Python</a> <a href=\"https://realpython.com/blog/python/automating-django-deployments-with-fabric-and-ansible/\">Automating Django Deployments With Fabric and Ansible</a></p>\n<p>En este tutorial automatizaremos el proceso de despliegue con Fabric (v1.12.0) y Ansible (v2.1.13) apuntando a estas problemáticas:</p>\n<ol>\n<li>Escalamiento: Cuando se trata de escalar una aplicaión web para manejar miles de peticiones diarias, un solo servidor no es una buena aproximación. Puesto simple, cuando el servidor se aproxima al máximo uso de CPU, se pueden causar tiempos de carga lentos, que eventualmente llevan al servidor a un fallo. Para solucionar esto, la aplicación debe escalar para ejecutarse en mas de un servidor, entonces los servidores pueden manejar <em>acumulativamente</em> mas peticiones concurrentes.</li>\n<li>Redundancia: Desplegar una aplicaión manualmente en un nuevo servidor implica un montón de trabajo repetido, con muchas probabilidades de un herror humano. Automatizar este proceso es clave.</li>\n</ol>\n<p>Específicamente automatizaremos:</p>\n<ol>\n<li>Agregar un usuario nuevo no root</li>\n<li>Configurar el servidor</li>\n<li>Halar el código desde un repositorio en Github</li>\n<li>Instalar las dependencias</li>\n<li>Usar la aplicación como un servicio.</li>\n</ol>\n<h2>Configuración</h2>\n<p>Comencemos por crear una nueva instancia de servidor Fedora 25, automáticamente vamos a utilizar una llave SSH con un script de Fabric. Como el proceso de escalamiento debe ser escalable, vamos a crear un repositorio separado para almacenar todos los scripts de aprovisionamiento. Vamos a crear un nuevo directorio local, y vamos a crear y activar un ambiente virtual usando Python 2.7</p>\n<blockquote>\n<p>Fabric no soporta python 3, por eso usamos python 2.7, pero no te preocupes, usaremos python 3.5 cuando aprovisionemos nuestro servidor.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir automated-deployments\ncd automated-deployments\nvirtualenv env\nsource env/bin/activate</code></pre></div>\n<h2>Configuración de Fabric</h2>\n<p>Fabric es una herramienta para automatizar rutinas de consola sobre SSH, y lo usaremos para:</p>\n<ol>\n<li>Configurar las llaves SSH</li>\n<li>Asegurar las contraseñas</li>\n<li>Instalar las dependencias de Ansible</li>\n<li>Actualizar el servidor.</li>\n</ol>\n<p>Comencemos por instalar Fabric</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install fabric==1.12.0</code></pre></div>\n<p>Creemos una nueva carpeta llamada “prod” y agreguemos un nuevo archivo llamado fabfile.py para tener todos los scripts de Fabric</p>\n<p><em>prod/fabfile.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import os\nfrom fabric.contrib.files import sed\nfrom fabric.api import env, local, run\nfrom fabric.api import env\n\n# Inicializar el directorio base\nabs_dir_path = os.path.dirname(\n    os.path.dirname(os.path.abspath(__file__)))\n\n\n# Declara las variables de entorno globales\n\n# Usuario root\nenv.user = &#39;root&#39;\n\n# Lista de las direcciones IP remotas\nenv.hosts = [&#39;&lt;remote-server-ip&gt;&#39;]\n\n# Contraseña del servidor remoto\nenv.password = &#39;&lt;remote-server-password&gt;&#39;\n\n# Nombre completo del usuario\nenv.full_name_user = &#39;&lt;your-name&gt;&#39;\n\n# Grupo del usuario\nenv.user_group = &#39;deployers&#39;\n\n# Usuario de el grupo anterior\nenv.user_name = &#39;deployer&#39;\n\n# Ruta a la llave SSH\nenv.ssh_keys_dir = os.path.join(abs_dir_path, &#39;ssh-keys&#39;)</code></pre></div>\n<p>Toma nota de los comentarios. Y asegúrate de agregar los datos correctos en las variables de <code class=\"language-text\">env</code></p>\n<h2>Configurar las llaves SSH</h2>\n<p>Agrega el siguiente código al fabfile.py</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def start_provision():\n    &quot;&quot;&quot;\n    Comenzar el aprovisionamiento del servidor\n    &quot;&quot;&quot;\n    # Crear un nuevo directorio para el nuevo servidor remoto\n    env.ssh_keys_name = os.path.join(\n        env.ssh_keys_dir, env.host_string + &#39;_prod_key&#39;)\n    local(&#39;ssh-keygen -t rsa -b 2048 -f {0}&#39;.format(env.ssh_keys_name))\n    local(&#39;cp {0} {1}/authorized_keys&#39;.format(\n        env.ssh_keys_name + &#39;.pub&#39;, env.ssh_keys_dir))\n    # Prevenir que el root pueda conectarse remotamente desde un cliente SSH\n    sed(&#39;/etc/ssh/sshd_config&#39;, &#39;^UsePAM yes&#39;, &#39;UsePAM no&#39;)\n    sed(&#39;/etc/ssh/sshd_config&#39;, &#39;^PermitRootLogin yes&#39;,\n        &#39;PermitRootLogin no&#39;)\n    sed(&#39;/etc/ssh/sshd_config&#39;, &#39;^#PasswordAuthentication yes&#39;,\n        &#39;PasswordAuthentication no&#39;)\n\n    install_ansible_dependencies()\n    create_deployer_group()\n    create_deployer_user()\n    upload_keys()\n    set_selinux_permissive()\n    run(&#39;service sshd reload&#39;)\n    upgrade_server()</code></pre></div>\n<p>Esta función actua como el punto de entrada para el Script de Fabric. Lanza una serioe de otras funciones que van a ser explicadas en otros pasos, explicitamente:</p>\n<ol>\n<li>Genera un nuevo par de llaves SSH en una ruta especificada en el sistema local</li>\n<li>Copia el contenido de la llave pública al archivo <em>authorized_keys</em></li>\n<li>Realiza los cambios al archivo remoto <em>sshd_config</em> para prevenir el ingreso del root y deshabilitar el ingreso sin contraseña</li>\n</ol>\n<blockquote>\n<p>Prevenir el acceso del usuario root por SSH es un paso opcional, pero es recomendado porque asegura que ningún ingreso tenga permisos de superusuario</p>\n</blockquote>\n<p>Cree un directorio para tus claves ssh en la raiz del proyecto.</p>\n<h2>Asegurar las contraseñas de los usuarios</h2>\n<p>Este paso incluye la adición de tres funciones diferentes, cada una se ejecuta en serie, para configurar el aseguramiento de las contraseñas</p>\n<p><strong>Crear un grupo para despliegues</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def create_deployer_group():\n    &quot;&quot;&quot;\n    Crea un grupo de usuarios para todos los desarrolladores del proyecto\n    &quot;&quot;&quot;\n    run(&#39;groupadd {}&#39;.format(env.user_group))\n    run(&#39;mv /etc/sudoers /etc/sudoers-backup&#39;)\n    run(&#39;(cat /etc/sudoers-backup; echo &quot;%&#39; +\n        env.user_group + &#39; ALL=(ALL) ALL&quot;) &gt; /etc/sudoers&#39;)\n    run(&#39;chmod 440 /etc/sudoers&#39;)</code></pre></div>\n<p>Aquí se crea un nuevo grupo llamado <code class=\"language-text\">deployers</code> y se le habilita permisos de super administrador, así que los usuarios pueden realizar procesos con privilegios de superadministradores</p>\n<p><strong>Crear usuario</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def create_deployer_user():\n    &quot;&quot;&quot;\n    Crear un usuario para el grupo\n    &quot;&quot;&quot;\n    run(&#39;adduser -c &quot;{}&quot; -m -g {} {}&#39;.format(\n        env.full_name_user, env.user_group, env.user_name))\n    run(&#39;passwd {}&#39;.format(env.user_name))\n    run(&#39;usermod -a -G {} {}&#39;.format(env.user_group, env.user_name))\n    run(&#39;mkdir /home/{}/.ssh&#39;.format(env.user_name))\n    run(&#39;chown -R {} /home/{}/.ssh&#39;.format(env.user_name, env.user_name))\n    run(&#39;chgrp -R {} /home/{}/.ssh&#39;.format(\n        env.user_group, env.user_name))</code></pre></div>\n<p>Esta función:</p>\n<ol>\n<li>Agrega un nuevo usuario al grupo <code class=\"language-text\">deployers</code>, que definimos en la última función</li>\n<li>Define el directorio SSH para almacenar las llaves SSH y dar los permisos al grupo y usuario para acceder a este directorio</li>\n</ol>\n<p><strong>Subir las llaves SSH</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def upload_keys():\n    &quot;&quot;&quot;\n    Subir las llaves públicas y privadas SSH al servidor remoto por SCP\n    &quot;&quot;&quot;\n    scp_command = &#39;scp {} {}/authorized_keys {}@{}:~/.ssh&#39;.format(\n        env.ssh_keys_name + &#39;.pub&#39;,\n        env.ssh_keys_dir,\n        env.user_name,\n        env.host_string\n    )\n    local(scp_command)</code></pre></div>\n<p>Aquí nosotros:</p>\n<ol>\n<li>Subimos las llaves SSH creadas localmente al servidor remoto entonces usuarios no root pueden ingresar por SSH sin ingresar la contraseña</li>\n<li>Copia la llave pública al servidor remoto en el directorio <em>ssh-keys</em></li>\n</ol>\n<h2>Instalar dependencias de Ansible</h2>\n<p>Agregar la siguiente función para instalar las dependencias para Ansible</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def install_ansible_dependencies():\n    &quot;&quot;&quot;\n    Instala el módulo python-dnf así que Ansible puede comunicarse con el manejador de paquetes de Fedora\n    &quot;&quot;&quot;\n    run(&#39;dnf install -y python-dnf&#39;)</code></pre></div>\n<blockquote>\n<p>Ten en cuenta que estamos utilizando una distribución de Linux en específico, usando el módulo DNF, que puede variar en otras distribuciones</p>\n</blockquote>\n<h2>Definir el modo permisivo de SELinux</h2>\n<p>La siguiente función define SELinux a un modo permisivo. Esto es hecho para prevenir cualquier error 502 arrojado por NginX.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def set_selinux_permissive():\n    &quot;&quot;&quot;\n    Define SELinux pa un modo permisivo/deshabilitado\n    &quot;&quot;&quot;\n    # Para permissos\n    run(&#39;sudo setenforce 0&#39;)</code></pre></div>\n<blockquote>\n<p>De nuevo es una función específica de Fedora</p>\n</blockquote>\n<p>Actualizar el servidor\nFinalmente podemos actualizar el servidor</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def upgrade_server():\n    &quot;&quot;&quot;\n    Actualizar el servidor como un usuario root\n    &quot;&quot;&quot;\n    run(&#39;dnf upgrade -y&#39;)\n    # Comando opcioanl (necesario para Fedora 25)\n    run(&#39;dnf install -y python&#39;)\n    run(&#39;reboot&#39;)</code></pre></div>\n<h1>Verificación de sanidad</h1>\n<p>Con eso, hemos terminado el script de Fabric, Antes de ejecutarlo, asegúrate de entrar al servidor y cambiar la contraseña de root</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh root@&lt;server-ip-address&gt;\nYou are required to change your password immediately (root enforced)\nChanging password for root.\n(current) UNIX password:\nNew password:\nRetype new password:</code></pre></div>\n<p>Asegurate de actualizar <code class=\"language-text\">env.password</code> con la nueva contraseña. Sal del servidor y vuelve a la terminal local, y luego ejecuta Fabric</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fab -f ./prod/fabfile.py start_provision</code></pre></div>\n<p>Si todo fue bien, las nuevas llaves SSH serán generadas y se te preguntará para crear una nueva contraseña, asegurate de hacer esto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Generating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:</code></pre></div>\n<p>Un número de tareas se ejecutarán. Después de que el usuario <code class=\"language-text\">deployer</code> es creado, se te preguntará para agregar una contraseña para el usuario</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[104.236.66.172] out: Changing password for user deployer.</code></pre></div>\n<p>Donde vas a tener que ingresar luego de que las llaves son subidas</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">deployer@104.236.66.172s password:</code></pre></div>\n<p>Después que este script se ejecute exitosamente, tu no podrás ser capaz de ingresar por ssh como root. En vez de eso, puedes ingresar como el usuario no root <code class=\"language-text\">deployer</code></p>\n<p>Prueba esto </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh root@&lt;server-ip-address&gt;\nPermission denied (publickey,gssapi-keyex,gssapi-with-mic).</code></pre></div>\n<p>Esto es lo esperado. Entonces para autenticarte neccesitaras algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh -i ./ssh-keys/104.236.66.172_prod_key deployer@104.236.66.172</code></pre></div>\n<p>Para ingresar correctamente</p>\n<h2>Ansible</h2>\n<p>Ansible es una herramienta de manejo de configuraciones y aprovisionamiento usada para automatizar el despliegue de tareas usando SSH.</p>\n<p>Puedes ejecutar tareas individuales de Ansible en servidores de aplicaciones desde tu consola remotamente y ejecutar tareas en caliente. Las tareas también pueden ser combinadas en un libro de recetas, una colección de muchas recetas, donde cada receta define algunas tareas específicas que son requeridas durante el proceso de despliegue. Ellos son ajecutados contra servidores de aplicaciones durante el proceso de despliegue. Los libros de revetas son escritos en YAML</p>\n<h3>Libros de revetas</h3>\n<p>Los libros de recetas consisten en una arquitectura modular como sigue:</p>\n<ol>\n<li>Hosts: especifican todas las direcciones IP o nombres de dominio de los servidores remotos para orquestar. Los libros de recetas siempre apuntan a un grupo de hosts</li>\n<li>Roles: están divididas en subpartes. Veamos algunas :</li>\n<li>Task: son una colección de múltiples tareas que necesitan ejecutarse durante el proceso de ejecución</li>\n<li>Handlers: proveen una manera de disparar un conjunto de operaciones cuando un módulo hace un cambio en el servidor remoto</li>\n<li>Templates: en este contexto, son usados generalmente para definir algunos archivos de configuración de módulos, como nginx</li>\n<li>Variables: Son una lista simple de parejas llave-valor donde cada llave (una variable) es mapeada a un valor. </li>\n</ol>\n<h3>Ejemplo de libro de recetas</h3>\n<p>Veamos un ejemplo de receta en un solo archivo</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\n# My Ansible playbook for configuring Nginx\n- hosts: all\n\n  vars:\n    http_port: 80\n    app_name: django_bootstrap\n\n  tasks:\n    - name: Install nginx\n      dnf: name=nginx state=latest\n\n    - name: Create nginx config file\n      template: src=django_bootstrap.conf dest=/etc/nginx/conf.d/{{ app_name }}.conf\n      become: yes\n      notify:\n        - restart nginx\n\n  handlers:\n    - name: Restart nginx\n      service: name=nginx state=restarted enabled=yes\n      become: yes</code></pre></div>\n<p>Aquí hemos definido lo siguiente:</p>\n<ol>\n<li>Host: como <code class=\"language-text\">hosts: all</code>, que representa que el libro de recetas se ejecutará en todos los servidores listados en el archivo de inventario</li>\n<li>Variables <code class=\"language-text\">http_port: 8 y</code>app<em>name: django</em>bootstrap` para usar en la plantilla</li>\n<li>Task para instalar nginx, definir la configuración del mismo y reiniciarlo</li>\n<li>Handler para reiniciar el serivicio</li>\n</ol>\n<h3>Configurción de los libros de recetas</h3>\n<p>Vamos a configurar un libro de recetas para Django. Agreguemos <em>deploy.yml</em> al directorio “prod”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# This playbook deploys the whole app stack\n##\n- name: apply common configuration to server\n  hosts: all\n  user: deployer\n  roles:\n    - common</code></pre></div>\n<p>El código anterior, junta los host, usuarios y roles</p>\n<h3>Hosts</h3>\n<p>Agrega un archivo <em>host</em> de texto plano en la carpeta “prod” para listar los servidores bajo sus respectivos grupos.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[common]\n&lt;server-ip-address&gt;</code></pre></div>\n<p>En el código anterior, common se refiere a un grupo, bajo el cual se listan un conjunto de direcciones ip.</p>\n<h3>Variables</h3>\n<p>Ahora definimos las variables que serán usadas en los roles. Agrega una nueva carpeta dentro de “prod” llamada <em>group_vars</em>, luego crea un archivo llamado <em>all</em> con formato de texto plano en esa carpeta, aquí definimos las variables para comenzar</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># App Name\napp_name: django_bootstrap\n\n# Deployer User and Groups\ndeployer_user: deployer\ndeployer_group: deployers\n\n# SSH Keys Directory\nssh_dir: &lt;path-to-your-ssh-keys&gt;</code></pre></div>\n<h3>Roles</h3>\n<p>De nuevo los roles son una colección de diferentes recetas, y todas se ejecutan bajo un rol específico. Crea un nuevo directorio llamado <em>roles</em> en la carpeta prod y luego dentro de roles, una carpeta <em>common</em> , luego crea carpetas con los siguientes nombres task, handlers y templates. De esta manera </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">??? prod\n?   ??? deploy.yml\n?   ??? fabfile.py\n?   ??? group_vars\n?   ?   ??? all\n?   ??? hosts\n?   ??? roles\n?       ??? common\n?           ??? handlers\n?           ??? tasks\n?           ??? templates\n??? ssh-keys\n    ??? 104.236.66.172_prod_key\n    ??? 104.236.66.172_prod_key.pub\n    ??? authorized_keys</code></pre></div>\n<p>Ahora dentro de task creamos un archivo de texto plano llamado <em>main.yml</em> que servirá como punto de entrada al rol.</p>\n<p>El contenido de este será</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Configure the server for the Django app\n##\n- include: 01_server.yml\n- include: 02_git.yml\n- include: 03_postgres.yml\n- include: 04_dependencies.yml\n- include: 05_migrations.yml\n- include: 06_nginx.yml\n- include: 07_gunicorn.yml\n- include: 08_systemd.yml\n# - include: 09_fix-502.yml</code></pre></div>\n<p>Ahora veremos cada uno de estos archivos</p>\n<p><em>01_server.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Update the DNF package cache and install packages as a root user\n##\n- name: Install required packages\n  dnf: name={{item}} state=latest\n  become: yes\n  with_items:\n    - vim\n    - fail2ban\n    - python3-devel\n    - python-virtualenv\n    - python3-virtualenv\n    - python-devel\n    - gcc\n    - libselinux-python\n    - redhat-rpm-config\n    - libtiff-devel\n    - libjpeg-devel\n    - libzip-devel\n    - freetype-devel\n    - lcms2-devel\n    - libwebp-devel\n    - tcl-devel\n    - tk-devel\n    - policycoreutils-devel</code></pre></div>\n<p>Aquí está una lista de todos los paquetes que van a ser instalados</p>\n<p><em>02_git.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Clone and pull the repo\n##\n- name: Set up git configuration\n  dnf: name=git state=latest\n  become: yes\n\n- name: Clone or pull the latest code\n  git: repo={{ code_repository_url }}\n        dest={{ app_dir }}</code></pre></div>\n<p>y agrega las siguientes variables a <em>group_vars/all</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Github Code&#39;s Repo URL\ncode_repository_url: https://github.com/realpython/django-bootstrap\n\n# App Directory\napp_dir: /home/{{ deployer_user }}/{{app_name}}</code></pre></div>\n<p><em>03_postgres.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Set up and configure postgres\n##\n- name: Install and configure db\n  dnf: name={{item}} state=latest\n  become: yes\n  with_items:\n    - postgresql-server\n    - postgresql-contrib\n    - postgresql-devel\n    - python-psycopg2\n\n- name: Run initdb command\n  raw: postgresql-setup initdb\n  become: yes\n\n- name: Start and enable postgres\n  service: name=postgresql enabled=yes state=started\n  become: yes\n\n- name: Create database\n  postgresql_db: name={{ app_name }}\n  become_user: postgres\n  become: yes\n\n- name: Configure a new postgresql user\n  postgresql_user: db={{ app_name }}\n                                name={{ db_user }}\n                                password={{ db_password }}\n                                priv=ALL\n                                role_attr_flags=NOSUPERUSER\n  become: yes\n  become_user: postgres\n  notify:\n    - restart postgres</code></pre></div>\n<p>y en <em>group_vars/all</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># DB Configuration\ndb_url: postgresql://{{deployer_user}}:{{db_password}}@localhost/{{app_name}}\ndb_password: thisissomeseucrepassword\ndb_name: &quot;{{ app_name }}&quot;\ndb_user: &quot;{{ deployer_user }}&quot;</code></pre></div>\n<p>Cambia <code class=\"language-text\">db_password</code> con una contraseña segura.</p>\n<p>Ahora crea un archivo <em>main.yml</em> en <em>handlers</em> con lo siguiente</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- name: restart postgres\n  service: name=postgresql state=restarted\n  become: yes</code></pre></div>\n<p><em>04_dependencies.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Set up all the dependencies in a virtualenv required by the Django app\n##\n- name: Create a virtualenv directory\n  file: path={{ venv_dir }} state=directory\n\n- name: Install dependencies\n  pip:    requirements={{ app_dir }}/requirements.txt\n          virtualenv={{ venv_dir }}\n          virtualenv_python=python3.5\n\n- name: Create the .env file for running ad-hoc python commands in our virtualenv\n  template: src=env.j2 dest={{ app_dir }}/.env\n  become: yes</code></pre></div>\n<p>y en <em>group_vars/all</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Application Dependencies Setup\nvenv_dir: &#39;/home/{{ deployer_user }}/envs/{{ app_name }}&#39;\nvenv_python: &#39;{{ venv_dir }}/bin/python3.5&#39;</code></pre></div>\n<p>y crea un archivo <em>env.j2</em> en la carpeta templates</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\nexport DEBUG=&quot;True&quot;\nexport DATABASE_URL=&quot;postgresql://deployer:thisissomeseucrepassword@localhost/django_bootstrap&quot;\nexport DJANGO_SECRET_KEY=&quot;changeme&quot;\nexport DJANGO_SETTINGS_MODULE=&quot;config.settings.production&quot;</code></pre></div>\n<blockquote>\n<p>Ten mucho cuidado con las variables de ambiente y sus valores en <em>env.j2</em>, desde que son usadas por el proyecto.</p>\n</blockquote>\n<p><em>05_migrations.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Run db migrations and get all static files\n##\n- name: Make migrations\n  shell: &quot;. {{ app_dir }}/.env; {{ venv_python }} {{ app_dir }}/manage.py makemigrations &quot;\n  become: yes\n\n- name: Migrate database\n  django_manage: app_path={{ app_dir }}\n                                 command=migrate\n                                 virtualenv={{ venv_dir }}\n\n- name: Get all static files\n  django_manage: app_path={{ app_dir }}\n                                 command=collectstatic\n                                 virtualenv={{ venv_dir }}\n  become: yes</code></pre></div>\n<p><em>06_nginx.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Configure nginx web server\n##\n- name: Set up nginx config\n  dnf: name=nginx state=latest\n  become: yes\n\n- name: Write nginx conf file\n  template: src=django_bootstrap.conf dest=/etc/nginx/conf.d/{{ app_name }}.conf\n  become: yes\n  notify:\n    - restart nginx</code></pre></div>\n<p>En <em>group_vars/all</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Remote Server Details\nserver_ip: &lt;remote-server-ip&gt;\nwsgi_server_port: 8000</code></pre></div>\n<p>y en <em>handlers/main.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- name: restart nginx\n  service: name=nginx state=restarted enabled=yes\n  become: yes</code></pre></div>\n<p>Crea una plantilla llamada <em>django_bootstrap.conf</em> en <em>templates</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">upstream app_server {\n    server 127.0.0.1:{{ wsgi_server_port }} fail_timeout=0;\n}\n\nserver {\n    listen 80;\n    server_name {{ server_ip }};\n    access_log /var/log/nginx/{{ app_name }}-access.log;\n    error_log /var/log/nginx/{{ app_name }}-error.log info;\n\n    keepalive_timeout 5;\n\n    # path for staticfiles\n    location /static {\n            autoindex on;\n            alias {{ app_dir }}/staticfiles/;\n    }\n\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n\n        if (!-f $request_filename) {\n            proxy_pass http://app_server;\n            break;\n        }\n    }\n}</code></pre></div>\n<p><em>07_gunicorn.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Set up Gunicorn and configure systemd to execute gunicorn_start script\n##\n- name: Create a deploy directory\n  file: path={{ deploy_dir }} state=directory\n  become: yes\n\n- name: Create the gunicorn_start script for running our app from systemd service\n  template: src=gunicorn_start\n                    dest={{ deploy_dir }}/gunicorn_start\n  become: yes\n\n- name: Make the gunicorn_start script executable\n  raw: cd {{ deploy_dir }}; chmod +x gunicorn_start\n  become: yes</code></pre></div>\n<p>y en <em>groups_vars/all</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Deploy Dir in App Directory\ndeploy_dir: &#39;{{ app_dir }}/deploy&#39;\n\n# WSGI Vars\ndjango_wsgi_module: config.wsgi\ndjango_settings_module: config.settings.production\ndjango_secret_key: &#39;changeme&#39;\ndatabase_url: &#39;{{ db_url }}&#39;</code></pre></div>\n<p>y en <em>templates/gunicorn_start</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\n### Define script variables\n\n# Name of the app\nNAME=&#39;{{ app_name }}&#39;\n# Path to virtualenv\nVIRTUALENV=&#39;{{ venv_dir }}&#39;\n# Django Project Directory\nDJANGODIR=&#39;{{ app_dir }}&#39;\n# The user to run as\nUSER={{ deployer_user }}\n# The group to run as\nGROUP={{deployer_group }}\n# Number of worker processes Gunicorn should spawn\nNUM_WORKERS=3\n# Settings file that Gunicorn should use\nDJANGO_SETTINGS_MODULE={{django_settings_module}}\n# WSGI module name\nDJANGO_WSGI_MODULE={{ django_wsgi_module }}\n\n\n### Activate virtualenv and create environment variables\n\necho &quot;Starting $NAME as `whoami`&quot;\n# Activate the virtual environment\ncd $VIRTUALENV\nsource bin/activate\ncd $DJANGODIR\n# Defining the Environment Variables\nexport DJANGO_SECRET_KEY=&#39;{{ django_secret_key }}&#39;\nexport DATABASE_URL=&#39;{{ db_url }}&#39;\nexport DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE\nexport PYTHONPATH=$DJANGODIR:$PYTHONPATH\n\n\n### Start Gunicorn\n\nexec gunicorn ${DJANGO_WSGI_MODULE}:application \\\n        --name $NAME \\\n        --workers $NUM_WORKERS \\\n        --user=$USER --group=$GROUP \\\n        --log-level=debug \\\n        --bind=127.0.0.1:8000</code></pre></div>\n<p><em>08_systemd.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Set up systemd for executing gunicorn_start script\n##\n- name: write a systemd service file\n  template: src=django-bootstrap.service\n                    dest=/etc/systemd/system\n  become: yes\n  notify:\n    - restart app\n    - restart nginx</code></pre></div>\n<p>Un nuevo template llamado <em>django-bootstrap.service</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/sh\n\n[Unit]\nDescription=Django Web App\nAfter=network.target\n\n[Service]\nPIDFile=/var/run/djangoBootstrap.pid\nUser={{ deployer_user }}\nGroup={{ deployer_group }}\nExecStart=/bin/sh {{ deploy_dir }}/gunicorn_start\nRestart=on-abort\n\n[Install]\nWantedBy=multi-user.target</code></pre></div>\n<p>y lo siguiente a <em>handlers/main.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- name: restart app\n  service: name=django-bootstrap state=restarted enabled=yes\n  become: yes</code></pre></div>\n<p><em>09_fix-502.yml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##\n# Fix the 502 nginx error post deployment\n#\n- name: Fix nginx 502 error\n  raw: cd ~; cat /var/log/audit/audit.log | grep nginx | grep denied | audit2allow -M mynginx; semodule -i mynginx.pp\n  become: yes</code></pre></div>\n<h2>Verificación</h2>\n<p>Ahora usaremos Ansible instalado en nuestro ambiente virtual  para realizar las pruebas</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install ansible==2.1.3</code></pre></div>\n<p>Ahora creamos un nuevo archivo llamado <em>deploy_prod.sh</em> en la carpeta raiz del proyecto y aseguremonos de colocar la dirección IP correcta</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\nansible-playbook ./prod/deploy.yml --private-key=./ssh_keys&lt;server-ip&gt;_prod_key -K -u deployer -i ./prod/hosts -vvv</code></pre></div>\n<p>y luego lo ejecutamos</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sh deploy_prod.sh</code></pre></div>\n<p>Si existen errores, revisa la terminal para ver como arreglarlos. Una vez terminado podrás usar el script de despliegue y luego podrás visitar la IP para verificar que el sitio web de django está activo</p>\n<p>asegurate de descomentar esta linea en <em>prod/roles/common/tasks/main.yml</em> si ves un mensaje de error 502, que indica que hay un problema entre nginx y gunicorn</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># - include: 09_fix-502.yml</code></pre></div>\n<h2>Conclusión</h2>\n<p>Este post provee un conocimiento básico de como puedes automatizar la configuración de un servidor con Fabric y Ansible. Los libros de recetas de Ansible son muy poderosos desde que puedes automatizar casi cualquier tarea del servidor con un archivo YAML. Espero que ahora puedas empezar a automatizar tus tareas de servidor usando Ansible y sus libros de recetas.</p>\n<p>Todo el código fuente se encuentra en <a href=\"https://github.com/realpython/automated-deployments\">el repositorio oficial de Real Python</a></p>\n<blockquote>\n<p>La propiedad intelectual de este post pertenece a  <a href=\"https://realpython.com/\">The Real Python</a>, para solicitar la remoción de este post, por favor comuníquese a <a href=\"mailto:ma0@contraslash.com\">ma0@contraslash.com</a></p>\n</blockquote>","frontmatter":{"title":"Automatizar despliegues de Django con Fabric y Ansible","date":"February 02, 2017","description":"Automatizar despliegues de Django con Fabric y Ansible"}}},"pageContext":{"slug":"/146-automatizar-despliegues-de-django-con-fabric-y-ans/","previous":{"fields":{"slug":"/145-eliminar-archivos-recursivamente-por-extension/"},"frontmatter":{"title":"Eliminar Archivos Recursivamente por extensión"}},"next":{"fields":{"slug":"/147-un-jarvis-simple-en-python/"},"frontmatter":{"title":"Un jarvis simple en Python"}}}}}