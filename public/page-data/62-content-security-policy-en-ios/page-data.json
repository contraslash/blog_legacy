{"componentChunkName":"component---src-templates-blog-post-js","path":"/62-content-security-policy-en-ios/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"d072993a-c3e6-58fb-9343-19b21ec28fc1","excerpt":"Content Security Policy en iOS con ionic Desde la salida de cordova 5.0, el trabajo conectándose a URLs externas es todo un fastidio, sugieren bajar el plugin…","html":"<h1>Content Security Policy en iOS con ionic</h1>\n<p>Desde la salida de cordova 5.0, el trabajo conectándose a URLs externas es todo un fastidio, sugieren bajar el plugin de <a href=\"https://github.com/apache/cordova-plugin-whitelist\">whitelist</a> y configurarlo como se sugiere en el <em>readme.md</em>, pero vaya sorpresa, a mi no me funcionó.</p>\n<p>En primera instancia voy a mencionar varios asuntos importantes que pueden salvarle la vida o no a un desarrollador con este problema.</p>\n<p>En el documentroot de nuestro proyecto ionic se encuentran varios archivos importantes, entre ellos la carpeta www y el archivo config.xml.</p>\n<p>Cada plataforma tiene su copia local de estos archivos y <strong>NO SE COPIAN AUTOMÁTICAMENTE</strong> en cada compilación. </p>\n<p>Esto que quiere decir, que los cambios los debemos realizar en el archivo local de cada plataforma para ver resultados cuando se compile. O usar un script que copie las últimas versiones de los archivos en el documentroot.</p>\n<p>Con esto en mente, efectuar los cambios pertinentes en el archivo local config.xml de cada plataforma y recompilar podría solucionar problemas.</p>\n<p>Pero no, específicamente con iOS tuve que meter un poco de machete :D</p>\n<p>Estas líneas me salvaron la vida, y pueden hacerlo contigo.</p>\n<p>En el archivo <code class=\"language-text\">{{DOCUMENT_ROOT}}/platforms/ios/{{PROJECT_NAME}}/Resources/{{PROJECT_NAME}}-Info.plist</code> añadí la siguiente regla</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;\n&lt;dict&gt;\n  &lt;!--Include to allow all connections (DANGER)--&gt;\n  &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;\n      &lt;true/&gt;\n&lt;/dict&gt;</code></pre></div>\n<p>Bueno, no precisamente esa regla, pero inicialmente solucionó mis problemas.</p>\n<p>La solución la encontré en <a href=\"http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http\">este post</a> y ahí hay un ejemplo más claro de como ingresar dominios mas específicos.</p>","frontmatter":{"title":"Content Security Policy en iOS con ionic","date":"January 29, 2016","description":""}}},"pageContext":{"slug":"/62-content-security-policy-en-ios/","previous":{"fields":{"slug":"/1-welcome-to-ghost/"},"frontmatter":{"title":"Welcome to Ghost"}},"next":{"fields":{"slug":"/59-un-tutorial-de-ansible/"},"frontmatter":{"title":"Un tutorial de Ansible"}}}}}