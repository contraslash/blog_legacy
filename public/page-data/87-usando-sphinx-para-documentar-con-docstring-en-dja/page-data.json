{"componentChunkName":"component---src-templates-blog-post-js","path":"/87-usando-sphinx-para-documentar-con-docstring-en-dja/","result":{"data":{"site":{"siteMetadata":{"title":"Blog de Contraslash (Legacy)"}},"markdownRemark":{"id":"70ab9534-787a-5212-bdf8-f93634e84e4e","excerpt":"Usando Sphinx para documentar con docString en Django Para usuarios que venimos de Java, la documentación automática de código fuente es una herramienta…","html":"<h1>Usando Sphinx para documentar con docString en Django</h1>\n<p>Para usuarios que venimos de Java, la documentación automática de código fuente es una herramienta importante para el mantenimiento de nuestros proyectos.</p>\n<p>El DocString es una herramienta de python para mantener el código entendible a los desarrolladores, y existen herramientas para proporcionar documentación por este medio.</p>\n<p><a href=\"http://www.sphinx-doc.org/en/stable/\">Sphinx</a> es una poderosa herramienta para documentar documentación en Python, y podemos usarla para documentar nuestro proyecto en django.</p>\n<p>Primero debemos instalar sphinx</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install Sphinx</code></pre></div>\n<p>Luego, podemos ejecutar el comando de configuración automática de sphinx</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sphinx-quickstart</code></pre></div>\n<p> Que nos llevará por una serie de pasos importantes, que podremos llenar con información de nuestro proyecto, pero quisiera darle importante a la activación de los módulos.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Please indicate if you want to use one of the following Sphinx extensions:\n&gt; autodoc: automatically insert docstrings from modules (y/n) [n]: y\n&gt; doctest: automatically test code snippets in doctest blocks (y/n) [n]: y\n&gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]: y\n&gt; todo: write &quot;todo&quot; entries that can be shown or hidden on build (y/n) [n]: y\n&gt; coverage: checks for documentation coverage (y/n) [n]: y\n&gt; imgmath: include math, rendered as PNG or SVG images (y/n) [n]: n\n&gt; mathjax: include math, rendered in the browser by MathJax (y/n) [n]: n\n&gt; ifconfig: conditional inclusion of content based on config values (y/n) [n]: n\n&gt; viewcode: include links to the source code of documented Python objects (y/n) [n]: y\n&gt; githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: n</code></pre></div>\n<p>Al terminar el asistente, podremos ejecutar el siguiente comando</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">make html</code></pre></div>\n<p>Existen distintas opciones, pero quiero enfocarme en la generación del HTML.</p>\n<p>Luego de esto, se crearán una serie de archivos, en la ubicación que definimos como <code class=\"language-text\">Root Path</code>, ahí encontraremos las siguientes carpetas</p>\n<ul>\n<li>build</li>\n<li>static</li>\n<li>templates</li>\n</ul>\n<p>Con el prefijo que nosotros hayamos definido.</p>\n<p>En root<em>path/prefijo</em>build encontraremos un archivo llamado <code class=\"language-text\">conf.py</code>, el cual debemos ajustar para que encuentre los módulos en python.</p>\n<p>Para esto debemos añadir las siguientes líneas</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sys.path.insert(0, os.path.abspath(&#39;ruta_proyecto&#39;))\nfrom django.conf import settings\nsettings.configure()</code></pre></div>\n<p>donde <code class=\"language-text\">ruta_proyecto</code> es la ubicación de nuestro proyecto.</p>\n<p>Es importante definir estas líneas antes de que se defina la variable <code class=\"language-text\">extensions</code>, que debe parecerse a esta:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">extensions = [\n    &#39;sphinx.ext.autodoc&#39;,\n    &#39;sphinx.ext.doctest&#39;,\n    &#39;sphinx.ext.intersphinx&#39;,\n    &#39;sphinx.ext.todo&#39;,\n    &#39;sphinx.ext.coverage&#39;,\n    &#39;sphinx.ext.viewcode&#39;,\n]</code></pre></div>\n<p>Con el archivo de configuración listo vamos a crear un archivo por cada archivo donde queremos que se genere la documentación automática en una nueva carpeta que crearemos llamada modules.</p>\n<p>Con esto tendremos una estructura de archivos similar a esto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">documentacion/\n    prefijo_build/\n    prefijo_static/\n    prefijo_templates/\n    modules/\n        app1/\n             forms.py\n            models.py\n            views.py\n        app2/\n             forms.py\n            models.py\n            views.py\n        .....\n    conf.py\n    index.rst</code></pre></div>\n<p>En cada archivo vamos a escribir el siguiente contenido</p>\n<p><em>modules/app1/forms.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Formularios de app 1\n=================\n\n.. automodule:: app1.forms\n    :members:</code></pre></div>\n<p>Donde la primera línea es el título del módulo y en la cuarta lína está la ubicación del archivo con el código fuente.</p>\n<p>Por último en <em>documentacion/index.rst</em> vamos a añadir las rutas de los archivos que acabamos de crear</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.....\nContents:\n\n.. toctree::\n   :maxdepth: 2\n\n   modules/app1/forms\n   modules/app1/models\n   modules/app1/views\n\n.....</code></pre></div>\n<p>Por último re ejecutaremos el comando de generación de documentación</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">make html</code></pre></div>\n<p>Y la documentación se creará.</p>\n<blockquote>\n<p>Este post está basado en <a href=\"http://www.marinamele.com/2014/03/document-your-django-projects.html\">este post</a></p>\n</blockquote>","frontmatter":{"title":"Usando Sphinx para documentar con docString en Django","date":"May 24, 2016","description":""}}},"pageContext":{"slug":"/87-usando-sphinx-para-documentar-con-docstring-en-dja/","previous":{"fields":{"slug":"/86-modificando-el-origin-de-git/"},"frontmatter":{"title":"Modificando el origin de git"}},"next":{"fields":{"slug":"/90-un-tutorial-fascinante-sobre-django/"},"frontmatter":{"title":"Un tutorial fascinante sobre Django"}}}}}